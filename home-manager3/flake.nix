# https://home-manager-options.extranix.com/
{
  description = "Home Manager configuration of mwoodpatrick";

  # Define where the flake gets its packages and modules. 
  # Inputs are usually other flakes (like the official Nix package collection) 
  # pinned to a specific Git URL or branch.
  inputs = {
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    neovim-nightly-overlay.url = "github:nix-community/neovim-nightly-overlay";
  };


# Define function that takes the inputs and returns a set of configuration artifacts. 
# This is where you define your systems, packages, and custom modules.
#
# Output Attribute	Purpose
#
# nixosConfigurations	Defines complete, deployable NixOS system configurations (e.g., your desktop setup).
# homeConfigurations	Defines configurations for users via Home Manager (e.g., user dotfiles, shell setup).
# packages.<system>	Defines standard software packages built for a specific architecture (e.g., x86_64-linux).
# devShells.<system>	Defines isolated development environments you can enter with nix develop.
# overlays	A function used to layer changes onto the Nixpkgs package set for the current flake.

# The self attribute is everything defined by the outputs function
# The inputs attribute is all the inputs passed to the outputs function which includes all the attributes
# defined in the inputs section

  outputs =
    { self, nixpkgs, home-manager, neovim-nightly-overlay, ... }@inputs:
    let
      # Define system architecture (e.g., for building packages)
      system = "x86_64-linux";
      # pkgs = nixpkgs.legacyPackages.${system};
      # Import the packages set for the defined system
      # pkgs = import nixpkgs { inherit system; };
      pkgs = import nixpkgs {
        inherit system;
        overlays = [ neovim-nightly-overlay.overlays.default ];
      };
    in
    {
      homeConfigurations."mwoodpatrick" = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;

        # Specify your home configuration modules here, for example,
        # the path to your home.nix.
        modules = [ 
          ./home.nix 
        ];

        # Optionally use extraSpecialArgs to pass through arguments to home.nix
        # pass self: the complete set of outputs generated by the flake
        # pass inputs: the complete set of inputs passed to outputs function
        # (Note: `inherit self inputs;` is a shorthand for `self = self; inputs = inputs;`).

        extraSpecialArgs = { 
          inherit system self inputs; 
        };
      };
    };
}
